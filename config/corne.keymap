/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPS>;
            key-positions = <24 35>;
        };

        Win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R      &kp T    &kp Y  &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LALT   &kp A  &kp S  &kp D      &kp F      &kp G    &kp H  &kp J  &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V      &kp B    &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LCTRL  &kp SPACE  &mo 2    &mo 3  &mo 1  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp ESC  &kp TILDE  &kp PIPE        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES    &kp F1              &kp F2  &kp F3  &kp F4   &kp F5   &kp F6
&kp TAB  &kp PLUS   &kp MINUS       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SQT              &kp F7              &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans   &kp EQUAL  &kp UNDERSCORE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DEL              &kp LC(LA(DELETE))  &none   &none   &none    &none    &kp LA(F4)
                                    &trans                &trans                 &trans               &trans              &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&trans  &none  &none     &kp UP_ARROW  &none      &none    &kp ASTERISK  &kp N7  &kp N8  &kp N9  &none  &none
&trans  &none  &kp LEFT  &kp DOWN      &kp RIGHT  &none    &kp MINUS     &kp N4  &kp N5  &kp N6  &none  &none
&trans  &none  &none     &none         &none      &none    &kp UNDER     &kp N1  &kp N2  &kp N3  &none  &none
                         &none         &none      &none    &none         &kp N0  &kp N0
            >;
        };

        layer_3 {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans         &trans         &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                             &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
